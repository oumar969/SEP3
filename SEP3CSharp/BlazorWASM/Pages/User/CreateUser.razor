@page "/CreateUser"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@using GraphQL
@using GraphQL.Client.Abstractions
@inject IUserService userService; 
@inject IGraphQLClient graphqlClient;

<div class="card">
    <h3>Create User</h3>
    <div class="form-group field">
        <div>
            <label>First name:</label>
            <input type="text" @bind="firstName" @bind:event="oninput"/>
        </div>
        <div>
            <label>Last name:</label>
            <input type="text" @bind="lastName" @bind:event="oninput"/>
        </div>
        <div>
            <label>Email:</label>
            <input type="text" @bind="email" @bind:event="oninput"/>
        </div>
        <div>
            <label>Password:</label>
            <input type="text" @bind="password" @bind:event="oninput"/>
            @if (!string.IsNullOrEmpty(resultMsg))
            {
                <label style="color: @color">@resultMsg</label>
            }
        </div>
    </div>
    <div class="button-row">
        <button @onclick="Create" disabled="@(string.IsNullOrEmpty(email))" class="acceptbtn">Create</button>
    </div>
</div>


@code {
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string password = "";
    private string resultMsg = "";
    private string color = "";
    
    private async Task Create()
    {
        resultMsg = "";
        color = "black";

        var createUserMutation = new GraphQLRequest
        {
            Query = @"
                mutation ($firstName: String!, $lastName: String!, $email: String!, $password: String!, $isLibrarian: Boolean!) {
                   createUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password, isLibrarian: $isLibrarian) {
                         firstName
                         lastName
                         email
                      }
                }",
            Variables = new 
            { 
                firstName = firstName, 
                lastName = lastName, 
                email = email, 
                password = password, 
                isLibrarian = true 
            }
        };

        try
        {
            var response = await graphqlClient.SendMutationAsync<Data>(createUserMutation);
            if (response.Errors != null && response.Errors.Length > 0)
            {
                resultMsg = "Error: " + string.Join(", ", response.Errors.Select(e => e.Message));
                color = "red";
                return;
            }

            if (response.Data != null)
            {
                firstName = "";
                lastName = "";
                email = "";
                password = "";

                resultMsg = "Brugeren er oprettet";
                color = "green";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = "Exception: " + e.Message; 
            color = "red";

        }
    }

    class Data
    {
        public User CreateUser { get; set; }
    }


}

