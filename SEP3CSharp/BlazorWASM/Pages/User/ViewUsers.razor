@page "/ViewUsers"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.DTOs
@using Microsoft.AspNetCore.Components
@attribute [Authorize]
@inject IUserService userService;
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3 style="text-align: center">Overview of all users</h3>


@if (userClaims.IsInRole("Librarian"))
{
    @if (users == null)
    {
        <span>Loading..</span>
    }
    else if (!users.Any())
    {
        <span>No users to be found</span>
    }
    else
    {
        <div class="users-container mt-3">
            @foreach (var user in users)
            {
                <div class="user-card card mb-3">
                    <div class="card-header">
                        <h5 class="d-flex justify-content-between align-items-center m-0">
                            <span>@user.FirstName @user.LastName</span>
                            <button class="btn btn-danger ms-3" @onclick="() => DeleteUser(user.UUID)">Delete</button>
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-2">
                            <div class="col-sm-3">
                                <strong>Email:</strong>
                            </div>
                            <div class="col-sm-2">
                                @user.Email
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-sm-3">
                                <strong>Librarian:</strong>
                            </div>
                            <div class="col-sm-2">
                                @(user.IsLibrarian ? "Yes" : "No")
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}
else
{
    <p>Denne side er kun for bibliotekets personale.</p>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private ICollection<User>? users;
    private string msg = "";

    ClaimsPrincipal? userClaims;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userClaims = authState.User;

        try
        {
            await LoadUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task LoadUsers()
    {
        users = (ICollection<User>?)await userService.GetUsers();
        Console.WriteLine("users len : " + users.Count);
        foreach (var user in users)
        {
            Console.WriteLine("user id: " + user.UUID);
        }
    }

    private async Task<bool> DeleteUser(string userUUID)
    {
        try
        {
            Console.WriteLine("Delete user with uuid: " + userUUID);
            var result = await userService.Delete(new UserDeleteDto(userUUID));
            Console.WriteLine("result : " + result);
            if (result.IsSuccessful)
            {
                await LoadUsers();
                return true;
            }
            else
            {
                throw new Exception(result.ErrMsg);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
            return false;
        }
    }

}