@page "/ViewUsers"
@using Domain.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@attribute [Authorize]
@using HttpClients.ClientInterfaces
 @inject IUserService userService;
<h3 style="text-align: center">Overview of all users</h3>


@if (isLibrarian)
{
    <h3>Hello @name</h3>
    @if (!string.IsNullOrEmpty(msg))
    {
        <div>
            <span>@msg</span>
        </div>
    }

    @if (users == null)
    {
        <span>Loading..</span>
    }
    else if (!users.Any())
    {
        <span>No users to be found</span>
    }
    else
    {
        <div class="users-container">
            @foreach (var user in users)
            {
                <div class="user-card">
                    <div>
                        <label>@user.FirstName</label>
                    </div>
                    <div>
                        <label>@user.LastName</label>
                    </div>
                    <div>
                        <label>@user.Email</label>
                    </div>
                    <div>
                        <label>@user.Password</label>
                    </div>
                    <div>
                        <label>@user.IsLibrarian</label>
                    </div>
                </div>
            }

        </div>
    }
}
else
{
    <p>You are not Admin.</p>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private ICollection<User>? users;
    private string msg = "";

    private string? name;
    private ICollection<Claim>? userClaims;
    private bool isLibrarian;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        isLibrarian = user.IsInRole("Librarian");

        try
        {
             users = (ICollection<User>?)await userService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

        if (!isLibrarian) return;

        //userClaims = user.Claims;
        name = user.Identity!.Name!;
    }

}