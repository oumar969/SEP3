@page "/ViewUsers"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@attribute [Authorize]
@inject IUserService userService;
<h3 style="text-align: center">Overview of all users</h3>


@if (isLibrarian)
{
    @if (users == null)
    {
        <span>Loading..</span>
    }
    else if (!users.Any())
    {
        <span>No users to be found</span>
    }
    else
    {
        <div class="users-container mt-3">
            @foreach (var user in users)
            {
                <div class="user-card card mb-3">
                    <div class="card-header">
                        <h5 class="card-title">@user.FirstName @user.LastName <button class="btn btn-danger float-right" @onclick="() => DeleteUser(user.UUID)">Delete</button></h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-2">
                            <div class="col-sm-3">
                                <strong>Email:</strong>
                            </div>
                            <div class="col-sm-2">
                                @user.Email
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-sm-3">
                                <strong>Librarian:</strong>
                            </div>
                            <div class="col-sm-2">
                                @(user.IsLibrarian ? "Yes" : "No")
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}
else
{
    <p>Denne side er kun for bibliotekets personale.</p>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private ICollection<User>? users;
    private string msg = "";

    private string? name;
    private ICollection<Claim>? userClaims;
    private bool isLibrarian;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        isLibrarian = user.IsInRole("Librarian");

        try
        {
            await LoadUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

        if (!isLibrarian) return;

        name = user.Identity!.Name!;
    }
    
    private async Task LoadUsers()
    {
        users = (ICollection<User>?)await userService.GetUsers();
        Console.WriteLine("users len : " + users.Count);
    }
    
    private async Task<bool> DeleteUser(string userUUID)
    {
        try
        {
            var result = await userService.Delete(userUUID);
            
            if (result == "ok")
            {
                await LoadUsers();
            }
            
            return result == "ok";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
            return false;
        }
    }
}
