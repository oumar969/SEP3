@page "/CreateBook"
@using System.Security.Claims
@using Domain.DTOs
@attribute [Authorize]
@inject NavigationManager navMgr

<div class="book-form-card">
    <h3 class="book-form-title">Registrer Bog</h3>

    <div class="book-form-field">
        <label class="book-form-label">ISBN</label>
        <input type="text" class="book-form-input" @bind="bookIsbn"/>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Titel</label>
        <input type="text" class="book-form-input" @bind="bookTitle"/>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Forfatter</label>
        <input type="text" class="book-form-input" @bind="bookAuthor"/>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Genre</label>
        <input type="text" class="book-form-input" @bind="bookGenre"/>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Beskrivelse</label>
        <textarea class="book-form-input" rows="4" @bind="bookDescription"></textarea>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Antal bøger på lager</label>
        <input type="text" class="book-form-input" @bind="stockNumber"/>
    </div>

    @if (!string.IsNullOrEmpty(msg))
    {
        <div class="book-form-error">@msg</div>
    }

    <button @onclick="Create" class="book-form-button">Registrer</button>
</div>

@code {
    // private ICollection<User>? users;
    //   private int? selectedUserId;

    private string bookTitle = "";
    private string bookAuthor = "";
    private string bookGenre = "";
    private string bookIsbn = "";
    private string bookDescription = "";
    private int stockNumber;

    private string msg = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    AuthenticationState authState;
    ClaimsPrincipal user;
    BookRegistryCreationDto dto;

    // protected override async Task OnInitializedAsync()
    // {
    //     msg = "";
    //     authState = await AuthState;
    //     user = authState.User;
    //     
    //     try
    //     {
    //     //    users = await userService.GetUsers();
    //         
    //         
    //     }
    //     catch (Exception e)
    //     {
    //         Console.WriteLine(e);
    //         msg = e.Message;
    //      
    //     }
    // }

    private async Task Create()
    {
        msg = "";

        if (string.IsNullOrEmpty(bookTitle))
        {
            msg = "Angiv venlist en titel.";
            return;
        }
        if (string.IsNullOrEmpty(bookIsbn))
        {
            msg = "Angiv venlist et ISBN.";
            return;
        }
        if (string.IsNullOrEmpty(bookAuthor))
        {
            msg = "Angiv venlist en forfatter.";
            return;
        }
        if (string.IsNullOrEmpty(bookGenre))
        {
            msg = "Angiv venlist en genre.";
            return;
        }
        if (string.IsNullOrEmpty(bookDescription))
        {
            msg = "Angiv venlist en beskrivelse af bogen.";
            return;
        }
        if (stockNumber.Equals(null))
        {
            msg = "Angiv venlist antal bøger.";
            return;
        }

        try
        {
            if (bookDescription.Length > 100)
            {
                msg = "Body cannot be more than 100 characters!";
                throw new Exception(msg);
            }
            var id = int.Parse(user.FindFirst("Id").Value);
    // dto = new(id, bookTitle, bookBody);
    // await postService.CreateAsync(dto);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
    //     msg = e.Message;
    //    msg = user.ToString();
    //     msg = (user.FindFirst("Id").Value);
            msg = dto.ToString();
        }
    }

}