@page "/CreateBook"
@using System.Security.Claims
@using Domain.DTOs
@using GraphQL.Client.Abstractions
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@attribute [Authorize]
@* @inject IUserService userService; *@
@* @inject IBookService postService; *@
@inject NavigationManager navMgr
@inject IGraphQLClient graphqlClient;
@inject IBookRegistryService bookRegistryService;
@inject IBookService bookService;


<div class="book-form-card">
    <h3 class="book-form-title">Registrer Bog</h3>

    <div class="book-form-field">
        <label class="book-form-label">ISBN</label>
        <input type="text" class="book-form-input" @bind="bookIsbn"/>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Titel</label>
        <input type="text" class="book-form-input" @bind="bookTitle"/>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Forfatter</label>
        <input type="text" class="book-form-input" @bind="bookAuthor"/>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Genre</label>
        <input type="text" class="book-form-input" @bind="bookGenre"/>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Beskrivelse</label>
        <textarea class="book-form-input" rows="4" @bind="bookDescription"></textarea>
    </div>

    <div class="book-form-field">
        <label class="book-form-label">Antal bøger på lager</label>
        <input type="text" class="book-form-input" @bind="stockNumber"/>
    </div>

    @if (!string.IsNullOrEmpty(msg))
    {
        @if (!bookRegistryCreated.IsSuccessful)
        {
            <div class="book-form-error">@msg</div>
        }
        else
        {
            <div class="book-form-success">@msg</div>
        }
    }

    <button @onclick="Create" class="book-form-button">Registrer</button>
</div>

@code {
    private string bookTitle = "";
    private string bookAuthor = "";
    private string bookGenre = "";
    private string bookIsbn = "";
    private string bookDescription = "";
    private int stockNumber;
    private string color;

    private string msg = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    AuthenticationState authState;
    ClaimsPrincipal user;
    BookRegistryCreationDto dto;
    BookRegistryCreationDto bookRegistryCreated;


    private async Task Create()
    {
        msg = "";
        color = "black";

        if (!BookRegistryValidator())
        {
            return;
        }

        try
        {
            bookRegistryCreated = await bookRegistryService.Create(new BookRegistryCreationDto(bookTitle, bookAuthor, bookGenre, bookIsbn, bookDescription, "", false, ""));
            Console.WriteLine(bookRegistryCreated.Title);
            if (bookRegistryCreated.IsSuccessful)
            {
                msg = "BookRegistry blev oprettet";
                color = "green";

                for (int i = 0; i < stockNumber; i++)
                {
                    var bookCreated = await bookService.CreateAsync(new BookCreationDto(null, bookIsbn, null));
                    Console.WriteLine("bookCreated:");
                    Console.WriteLine(bookCreated.IsSuccessful);
                    Console.WriteLine(bookCreated.Message);
                }

                navMgr.NavigateTo("/BookCatalog");
            }
            else
            {
                color = "red";
                msg = bookRegistryCreated.Message;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = "Exception: " + e.Message;
            color = "red";
        }
    }


    private bool BookRegistryValidator()
    {
        if (string.IsNullOrEmpty(bookTitle))
        {
            msg = "Angiv venlist en titel.";
            return false;
        }
        if (string.IsNullOrEmpty(bookIsbn))
        {
            msg = "Angiv venlist et ISBN.";
            return false;
        }
        if (string.IsNullOrEmpty(bookAuthor))
        {
            msg = "Angiv venlist en forfatter.";
            return false;
        }
        if (string.IsNullOrEmpty(bookGenre))
        {
            msg = "Angiv venlist en genre.";
            return false;
        }
        if (string.IsNullOrEmpty(bookDescription))
        {
            msg = "Angiv venlist en beskrivelse af bogen.";
            return false;
        }
        if (stockNumber.Equals(null))
        {
            msg = "Angiv venlist antal bøger.";
            return false;
        }
        if (bookDescription.Length > 100)
        {
            msg = "Body cannot be more than 100 characters!";
            return false;
        }
        if (bookIsbn.Length != 13)
        {
            msg = "ISBN skal være 13 cifre";
            return false;
        }

        return true;
    }

}