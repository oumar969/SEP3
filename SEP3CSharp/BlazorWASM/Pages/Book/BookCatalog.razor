@page "/BookCatalog"
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using Domain.Models
@using BlazorWASM.Services
@inject IBookService bookService
@inject NavigationManager navMgr
@inject IUserService userClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBookRegistryService bookRegistryService;
@inject BookStateService bookStateService


<div class="row align-items-center justify-content-between">
    <div class="col">
        <h3 class="mb-4">Bog Katalog</h3>
    </div>
    @if (isLibrarian)
    {
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="RegisterBook">Registrer Ny Bog</button>
        </div>
    }
</div>

@if (books == null)
{
    <p>Kunne ikke indlæse bøger</p>
}
else if (filteredBooks == null)
{
    <p>Indlæser bøger...</p>
}
else
{
    <div class="container">
        <div class="search-bar mb-4">
            <div class="d-flex flex-wrap align-items-end">
                <div class="flex-grow-1 me-2">
                    <label for="searchField" class="form-label">Søg</label>
                    <input type="text" id="searchField" class="form-control" placeholder="Søg efter titel eller forfatter..." @bind="searchTerm" @bind:event="oninput"/>
                </div>
                <div class="me-2">
                    <label for="genreSelect" class="form-label">Genre</label>
                    <select id="genreSelect" class="form-select" @bind="selectedGenre">
                        @foreach (var genre in genres)
                        {
                            <option value="@genre">@genre</option>
                        }
                    </select>
                </div>
                @if (!isLibrarian)
                {
                    <div class="form-check mb-3">
                        <input type="checkbox" class="form-check-input" id="myLoansCheck" @bind="myLoans"/>
                        <label class="form-check-label" for="myLoansCheck">Mine lån</label>
                    </div>
                }
            </div>
        </div>
        <div class="row">
            @foreach (var book in filteredBooks)
            {
                <div class="col-md-3">
                    <div class="card mb-4 shadow-sm" style="cursor: pointer;" @onclick="_ => OpenBookView(book)">
                        <img class="bd-placeholder-img card-img-top" width="100%" height="300" src="@(true ? "Image/book-placeholder.png" : "Image/book-placeholder.png")" alt="Book image">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">@book.Genre</p>
                            <p class="card-text">@book.Author</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<BookRegistry> books;
    private bool isLibrarian;

    private bool myLoans;

    private List<BookRegistry> filteredBooks = new();
    private readonly List<string> genres = new() { "Alle", "Klassisk", "Historie", "Fiktion", "Science Fiction", "Fantasy" };

    private string _searchTerm;

    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                FilterBooks(); // Call FilterBooks whenever searchTerm changes
            }
        }
    }

    private string _selectedGenre = "Alle"; // Initialize with "All" to show all genres by default

    private string selectedGenre
    {
        get => _selectedGenre;
        set
        {
            if (_selectedGenre != value)
            {
                _selectedGenre = value;
                FilterBooks(); // Call FilterBooks whenever selectedGenre changes
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isLibrarian = user.IsInRole("Librarian");
    // var userDetails = await userClient.GetUserByEmailAsync(user.Identity?.Name.ToString());

        books = await bookRegistryService.GetBookRegistries();

        selectedGenre = "Alle";
        searchTerm = "";
        FilterBooks();
    }

    // FilterBooks method remains unchanged
    private void FilterBooks()
    {
        filteredBooks = books
            .Where(b => (selectedGenre == "Alle" || b.Genre == selectedGenre) &&
                        (string.IsNullOrEmpty(searchTerm) || b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                         b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .OrderBy(b => b.Title)
            .ToList();
    }

    private void OpenBookView(BookRegistry book)
    {
        bookStateService.SetCurrentBook(book);
        navMgr.NavigateTo("/BookView");
    }


    private void RegisterBook()
    {
        navMgr.NavigateTo("/CreateBook");
    }



}