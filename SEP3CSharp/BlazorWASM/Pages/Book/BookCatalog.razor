@page "/BookCatalog"
@using HttpClients.ClientInterfaces
@inject IBookService bookService
@inject NavigationManager navMgr


<div class="row align-items-center justify-content-between">
    <div class="col">
        <h3 class="mb-4">Book Catalog</h3>
    </div>
    <div class="col-auto">
        <button type="button" class="btn btn-primary">Register New Book</button>
    </div>
</div>

@if (filteredBooks == null)
{
    <p>Loading books...</p>
}
else
{
    <div class="container">
        <div class="search-bar mb-4">
            <div class="d-flex flex-wrap align-items-end">
                <div class="flex-grow-1 me-2">
                    <label for="searchField" class="form-label">Search</label>
                    <input type="text" id="searchField" class="form-control" placeholder="Search by title or author..." @bind="searchTerm" @bind:event="oninput"/>
                </div>
                <div class="me-2">
                    <label for="genreSelect" class="form-label">Genre</label>
                    <select id="genreSelect" class="form-select" @bind="selectedGenre">
                        @foreach (var genre in genres)
                        {
                            <option value="@genre">@genre</option>
                        }
                    </select>
                </div>
                <div class="form-check mb-3">
                    <input type="checkbox" class="form-check-input" id="myLoansCheck" @bind="myLoans"/>
                    <label class="form-check-label" for="myLoansCheck">My loans</label>
                </div>
            </div>
        </div>
        <div class="row">
            @foreach (var book in filteredBooks)
            {
                <div class="col-md-3">
                    <div class="card mb-4 shadow-sm" style="cursor: pointer;" @onclick="OpenBookView">
                        <img class="bd-placeholder-img card-img-top" width="100%" height="300" src="@(!string.IsNullOrEmpty(book.ImageUrl) ? book.ImageUrl : "Image/book-placeholder.png")" alt="Book image">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">@book.Genre</p>
                            <p class="card-text">@book.Author</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Book> books;
    private readonly Random random = new();

    private bool myLoans;

    private List<Book> filteredBooks = new();
    private readonly List<string> genres = new() { "All", "Classic", "Historical", "Fiction", "Science Fiction", "Fantasy" };

    private string _searchTerm;

    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                FilterBooks(); // Call FilterBooks whenever searchTerm changes
            }
        }
    }

    private string _selectedGenre = "All"; // Initialize with "All" to show all genres by default

    private string selectedGenre
    {
        get => _selectedGenre;
        set
        {
            if (_selectedGenre != value)
            {
                _selectedGenre = value;
                FilterBooks(); // Call FilterBooks whenever selectedGenre changes
            }
        }
    }

    protected override Task OnInitializedAsync()
    {
        LoadSampleBooks();
    // Assuming that at initialization, we want to filter books with default values.
    // If the initial values for searchTerm and selectedGenre are not "", "All", you should set them before calling FilterBooks.
        selectedGenre = "All"; // Default value, adjust if needed
        searchTerm = ""; // Default value, adjust if needed
        FilterBooks();
        return base.OnInitializedAsync();
    }

    // FilterBooks method remains unchanged
    private void FilterBooks()
    {
        filteredBooks = books
            .Where(b => (selectedGenre == "All" || b.Genre == selectedGenre) &&
                        (string.IsNullOrEmpty(searchTerm) || b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                         b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .OrderBy(b => b.Title)
            .ToList();
    }

    private void OpenBookView()
    {
        Console.WriteLine("OpenBookView1");
        navMgr.NavigateTo("/BookView");
        Console.WriteLine("OpenBookView2");
    }

    private void LoadSampleBooks()
    {
        books = new List<Book>();

    // Predefined arrays of possible book data
        string[] titles = { "The Great Gatsby", "War and Peace", "To Kill a Mockingbird", "1984", "The Catcher in the Rye", "The Hobbit" };
        string[] authors = { "F. Scott Fitzgerald", "Leo Tolstoy", "Harper Lee", "George Orwell", "J.D. Salinger", "J.R.R. Tolkien" };
        string[] genres = { "Classic", "Historical", "Fiction", "Science Fiction", "Fantasy" };
        string[] descriptions =
        {
            "A novel about the Roaring Twenties.",
            "A tale of war and peace in early 19th-century Russia.",
            "A story of racial injustice in the Deep South.",
            "A dystopian future ruled by totalitarianism.",
            "A coming-of-age story.",
            "A fantasy adventure in Middle-earth."
        };

    // Loop to create and add 20 random books
        for (var i = 0; i < 20; i++)
        {
            books.Add(new Book
            {
                ISBN = GenerateRandomISBN(),
                Title = titles[random.Next(titles.Length)],
                Author = authors[random.Next(authors.Length)],
                Genre = genres[random.Next(genres.Length)],
                Description = descriptions[random.Next(descriptions.Length)],
                ImageUrl = null,
                Reviews = GenerateRandomReviews()
            });
        }
    }

    private string GenerateRandomISBN()
    {
    // ISBN-10 is usually a 10 digit number, this will create a number between 1000000000 and 2147483647
        return $"{random.Next(1000000000, int.MaxValue)}";
    }

    private List<string> GenerateRandomReviews()
    {
        var reviewCount = random.Next(1, 6); // Generate between 1 and 5 reviews
        var reviews = new List<string>();
        for (var i = 0; i < reviewCount; i++)
        {
            reviews.Add($"Review {i + 1}");
        }
        return reviews;
    }

    public class Book
    {
        public string ISBN { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public string Genre { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }
        public List<string> Reviews { get; set; }
    }

}