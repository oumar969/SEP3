@page "/BookCatalog"
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using Domain.Models
@using BlazorWASM.Services
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@using Newtonsoft.Json;
@inject IBookService bookService
@inject NavigationManager navMgr
@inject IBookRegistryService bookRegistryService;
@inject BookStateService bookStateService
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="row align-items-center justify-content-between mb-4">
    <div class="col">
        <h3>Bog Katalog</h3>
    </div>
    @if (userClaims.IsInRole("Librarian"))
    {
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="RegisterBook">Registrer Ny Bog</button>
        </div>
    }
</div>

@if (bookRegistries == null)
{
    <p>Kunne ikke indlæse bøger</p>
}
else if (filteredBookRegistries == null)
{
    <p>Indlæser bøger...</p>
}
else
{
    <div class="container">
        <div class="search-bar mb-4">
            <div class="d-flex flex-wrap align-items-end">
                <div class="flex-grow-1 me-2">
                    <label for="searchField" class="form-label">Søg</label>
                    <input type="text" id="searchField" class="form-control" placeholder="Søg efter titel, genre eller forfatter..." @bind="searchTerm" @bind:event="oninput"/>
                </div>
                <AuthorizeView>
                    <Authorized>
                        @if (!userClaims.IsInRole("Librarian"))
                        {
                            <div class="form-check mb-3">
                                <input type="checkbox" class="form-check-input" id="myLoansCheck" @bind="myLoans" @onclick="MyLoansPressed"/>
                                <label class="form-check-label" for="myLoansCheck">Mine lån</label>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
        <div class="row">
            @foreach (var book in filteredBookRegistries)
            {
                @if (myLoans && !loanedBooks.Contains(book.Isbn))
                {
                    continue;
                }
                <div class="col-md-3">
                    <div class="card mb-4 shadow-sm" style="cursor: pointer;" @onclick="_ => OpenBookView(book)">
                        <img class="bd-placeholder-img card-img-top" width="100%" height="300" src="@(true ? "Image/book-placeholder.png" : "Image/book-placeholder.png")" alt="Book image">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">@book.Genre</p>
                            <p class="card-text">@book.Author</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private ICollection<BookRegistry> bookRegistries;
    private bool myLoans = false;
    private User userDetails;
    private ICollection<Book> books;
    private ICollection<string> loanedBooks;
    private List<BookRegistry> filteredBookRegistries = new();
    ClaimsPrincipal? userClaims;

    private string _searchTerm;

    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                FilterBooks(); // Call FilterBooks whenever searchTerm changes
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userClaims = authState.User;
        bookRegistries = await bookRegistryService.GetBookRegistries();

        Console.WriteLine("cur us: " + userClaims.Identity);
        if (userClaims.Identity != null)
        {
            books = await bookService.GetAllBooksAsync("");
            LoanedBooks();
        }
        searchTerm = "";
        FilterBooks();
    }

    private void LoanedBooks()
    {
        Console.WriteLine("here tyhere");
        if (books.Count() > 0)
        {
            loanedBooks = books
                .Where(b => b.LoanerUuid == userClaims.FindFirst("UUID")?.Value)
                .Select(b => b.Isbn)
                .ToList();
        }
    }

    // FilterBooks method remains unchanged
    private void FilterBooks()
    {
        filteredBookRegistries = bookRegistries
            .Where(b =>
                (string.IsNullOrEmpty(searchTerm) || b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 b.Genre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .OrderBy(b => b.Title)
            .ToList();
    }

    private async void OpenBookView(BookRegistry bookRegistry)
    {
        string bookJson = JsonConvert.SerializeObject(bookRegistry);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedBook", bookJson);
        bookStateService.SetCurrentBook(bookRegistry);
        navMgr.NavigateTo("/BookView");
    }


    private void RegisterBook()
    {
        navMgr.NavigateTo("/CreateBook");
    }

    private void MyLoansPressed()
    {
        myLoans = !myLoans;
    }

}