@page "/BookView"
@using HttpClients.ClientInterfaces
@using BlazorWASM.Services
@using Domain.Models
@inject IBookService bookService
@inject IUserService userClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navMgr
@inject BookStateService bookStateService


<div class="row align-items-center justify-content-between mb-4">
    <div class="col">
        <h3>Bog</h3>
    </div>
    <div class="col-auto">
        <button class="btn btn-primary" @onclick="GoToBookCatalog">Tilbage</button>
    </div>
</div>


<div class="container my-4">
    <div class="card mb-3 rounded">
        <!-- Added rounded class here -->
        <div class="row g-0">
            <div class="col-md">
                <img src="Image/book-placeholder.png" class="img-fluid h-100" alt="Book Image"/> <!-- Removed rounded-start class -->
            </div>
            <div class="vr"/>
            <div class="col-md-10">
                <div class="card-body">
                    <h5 class="card-title">@book.Title</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@book.Author</h6>
                    <p class="card-text">@book.Description</p>
                    <p class="card-text">
                        <small class="text-muted">
                            <strong>Genre:</strong> @book.Genre
                        </small>
                    </p>
                    <p class="card-text">
                        <small class="text-muted">
                            <strong>ISBN:</strong> @book.Isbn
                        </small>
                    </p>
                    <p class="card-text">
                        <small class="text-muted">
                            <strong>På lager:</strong>
                            <span class="@(bookCount == 0 ? "text-danger" : "")">@bookCount</span>
                        </small>
                    </p>
                </div>
                <div class="card-footer d-flex justify-content-end justify-content-between" style="gap: 14px;">
                    @if (isLibrarian)
                    {
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-danger shadow-none" @onclick="RemoveBook">-</button>
                            <button type="button" class="btn btn-outline-success shadow-none" @onclick="AddBook">+</button>
                        </div>
                    }
                    <div>
                        @if (isLibrarian)
                        {
                            <button class="btn btn-danger" @onclick="deleteBookRegistry">Slet Bog</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="LoanBook" disabled="@(bookCount == 0)">Lån Bog</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* @if (book.Reviews.Any()) *@
    @* { *@
    @*     <div class="card rounded mt-4"> *@
    @*         <!-- Add margin-top for spacing from the above content --> *@
    @*         <div class="card-body"> *@
    @*             <h5 class="mb-3">Reviews</h5> <!-- Add margin-bottom to space out the title from the list --> *@
    @*             <ul class="list-group list-group-flush"> *@
    @*                 <!-- Use list-group for styling individual items --> *@
    @*                 @foreach (var review in book.Reviews) *@
    @*                 { *@
    @*                     <li class="list-group-item"> *@
    @*                         <!-- list-group-item gives padding and proper styling --> *@
    @*                         <!-- You can add more styling here if you want to customize further --> *@
    @*                         @review *@
    @*                     </li> *@
    @*                 } *@
    @*             </ul> *@
    @*         </div> *@
    @*     </div> *@
    @* } *@
</div>


@code {
    private bool isLibrarian;

    private BookRegistry book;

    private void deleteBookRegistry()
    {
    // bookService.DeleteBook(book);
    }

    private int bookCount = 0;

    private void AddBook()
    {
        bookCount++;
    }

    private void RemoveBook()
    {
        if (bookCount > 0)
        {
            bookCount--;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        book = bookStateService.CurrentBook;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isLibrarian = user.IsInRole("Librarian");
    }

    private void LoanBook()
    {
    // Log
    }


    private void GoToBookCatalog()
    {
        navMgr.NavigateTo("/BookCatalog");
    }

}
