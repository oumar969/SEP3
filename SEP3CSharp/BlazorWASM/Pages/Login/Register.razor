@page "/register"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using HotChocolate
@using Microsoft.AspNetCore.Components
@using BlazorWASM.Services
@using System.Security.Claims
@inject NavigationManager navMgr
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService userService;

<div class="login-card">
    <h3 class="login-title">
        @(userClaims.IsInRole("Librarian") ? "Opret Bruger" : "Registrer")
    </h3>


    @if (ShowErrors)
    {
        <div class="login-error">
            <span>@Message</span>
        </div>
    }
    else if (ShowSuccess)
    {
        <div class="login-success">
            <span>Brugeren blev oprettet</span>
        </div>
    }

    <EditForm Model="registerModel" OnValidSubmit="HandleRegistration" class="login-form">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="login-field">
            <label for="firstName">Fornavn</label>
            <input id="firstName" class="login-input" @bind="registerModel.FirstName" @bind:event="oninput"/>
            <ValidationMessage For="@(() => registerModel.FirstName)"/>
        </div>
        <div class="login-field">
            <label for="lastName">Efternavn</label>
            <input id="lastName" class="login-input" @bind="registerModel.LastName" @bind:event="oninput"/>
            <ValidationMessage For="@(() => registerModel.LastName)"/>
        </div>
        <div class="login-field">
            <label for="email">Email</label>
            <input id="email" class="login-input" type="email" @bind="registerModel.Email" @bind:event="oninput"/>
            <ValidationMessage For="@(() => registerModel.Email)"/>
        </div>
        <div class="login-field">
            <label for="password">Kodeord</label>
            <input id="password" class="login-input" type="password" @bind="registerModel.Password" @bind:event="oninput"/>
            <ValidationMessage For="@(() => registerModel.Password)"/>
        </div>
        <div class="login-field">
            <label for="confirmPassword">Bekræft Kodeord</label>
            <input id="confirmPassword" class="login-input" type="password" @bind="registerModel.ConfirmPassword" @bind:event="oninput"/>
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)"/>
        </div>
        <AuthorizeView>
            <Authorized Context="isLibrarianCheck">
                <div>
                    @if (userClaims.IsInRole("Librarian"))
                    {
                        <div class="form-check mb-3">
                            <input type="checkbox" class="form-check-input" id="myLoansCheck" @bind="registerModel.IsLibrarian"/>
                            <label class="form-check-label" for="myLoansCheck">Er biblioteks personale</label>
                            <ValidationMessage For="@(() => registerModel.IsLibrarian)"/>
                        </div>
                    }
                </div>
            </Authorized>
        </AuthorizeView>
        <div class="login-field">
            <button type="submit" class="login-button">Registrer</button>
        </div>
    </EditForm>
</div>

@code {
    private bool ShowErrors { get; set; }
    private bool ShowSuccess { get; set; }
    private string Message { get; set; }
    private RegisterModel registerModel { get; } = new();
    ClaimsPrincipal? userClaims;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userClaims = authState.User;
    }

    private async Task HandleRegistration()
    {
        Console.WriteLine("handling registration");
        try
        {
            if (!IsValidtInput())
            {
                return;
            }
            UserCreationDto userCreatedDto = await userService.Create(new UserCreationDto(
                registerModel.FirstName, registerModel.LastName, registerModel.Email, registerModel.Password, registerModel.IsLibrarian));

            if (userCreatedDto.IsSuccessful)
            {
                Console.WriteLine("created user");
                ShowSuccess = true;
                ShowErrors = false;
                Console.WriteLine("hmm? " + userClaims.FindFirst("UUID")?.Value);
                if (userClaims.FindFirst("UUID")?.Value == null)
                {
                    navMgr.NavigateTo("/Login");
                }
                else
                {
                    navMgr.NavigateTo("/");
                }
            }
            else
            {
                Console.WriteLine("did not create user");
                ShowSuccess = false;
                ShowErrors = true;
                Message = userCreatedDto.ErrMsg;
            }
        }
        catch
            (Exception e)
        {
            Console.WriteLine(e);
            ShowSuccess = false;
            ShowErrors = true;
            Message = "Fejl under oprettelse af bruger: " + e.Message;
        }
    }

    private bool IsValidtInput()
    {
        if (string.IsNullOrWhiteSpace(registerModel.FirstName))
        {
            Message = "Fornavn skal udfyldes";
            ShowErrors = true;
        }
        else if (string.IsNullOrWhiteSpace(registerModel.LastName))
        {
            Message = "Efternavn skal udfyldes";
            ShowErrors = true;
        }
        else if (string.IsNullOrWhiteSpace(registerModel.Email))
        {
            Message = "Email skal udfyldes";
            ShowErrors = true;
        }
        else if (string.IsNullOrWhiteSpace(registerModel.Password))
        {
            Message = "Kodeord skal udfyldes";
            ShowErrors = true;
        }
        else if (string.IsNullOrWhiteSpace(registerModel.ConfirmPassword))
        {
            Message = "Bekræft kodeord skal udfyldes";
            ShowErrors = true;
        }
        else if (registerModel.Password.Length < 8)
        {
            Message = "Kodeord skal være mindst 8 karakterer langt";
            ShowErrors = true;
        }
        else if (registerModel.Password != registerModel.ConfirmPassword)
        {
            Message = "Kodeord og bekræft kodeord skal være ens";
            ShowErrors = true;
        }
        else
        {
            ShowErrors = false;
            return true;
        }
        return false;
    }

}