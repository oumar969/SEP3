@page "/register"
@using WebApi.Services
@using Microsoft.AspNetCore.Components
@using Domain.Models
@* @inject IAuthService authService *@
@inject NavigationManager navMgr

<h3>Register</h3>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Message</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText Id="firstName" class="form-control" @bind-Value="RegisterModel.FirstName" />
                <ValidationMessage For="@(() => RegisterModel.FirstName)" />
            </div>
            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText Id="lastName" class="form-control" @bind-Value="RegisterModel.LastName" />
                <ValidationMessage For="@(() => RegisterModel.LastName)" />
            </div>

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>
            <div class="form-group">
                <label for="password">Confirm Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </EditForm>
    </div>
</div>

<div class="card">
    <h3>Please login</h3>
    <div class="field">
        <label>User name:</label>
        <input type="text" @bind="userName" />
    </div>
    <div class="field">
        <label style="text-align: center">Password:</label>
        <input type="password" @bind="password" />
    </div>
    @if (!string.IsNullOrEmpty(errorLabel))
    {
        <div class="field">
            <label style="color: red">
                @errorLabel
            </label>
        </div>
    }
    <div class="field">
        <button class="loginbtn" @onclick="LoginAsync">Log in</button>
    </div>
</div>

@code {
    private string userName;
    private string password;
    private string errorLabel;

    private bool ShowErrors { get; set; }
    private string Message { get; set; }
    private RegisterModel RegisterModel { get; set; } = new RegisterModel();

    private async Task HandleRegistration()
    {
        ShowErrors = false; // Reset the error display
        try
        {
            // Your registration logic here
            // Example: await authService.RegisterAsync(RegisterModel);
            // Assuming RegisterAsync returns without throwing an exception on success
            // You can modify it based on your actual registration logic

            // After successful registration, you can automatically log in the user if needed
            
    //await authService.LoginAsync(RegisterModel.Email, RegisterModel.Password);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ShowErrors = true;
            Message = $"Error: {e.Message}";
        }
    }

    private async Task LoginAsync()
    {
        ShowErrors = false; // Reset the error display
        try
        {
           // await authService.LoginAsync(userName, password);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ShowErrors = true;
            Message = $"Error: {e.Message}";
        }
    }
}

